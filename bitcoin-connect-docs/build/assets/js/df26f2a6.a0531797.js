"use strict";(self.webpackChunkbitcoin_connect_docs=self.webpackChunkbitcoin_connect_docs||[]).push([[708],{9849:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=t(4848),a=t(8453);const i={sidebar_position:2},r="React",c={id:"usage/react",title:"React",description:"NextJS / SSR",source:"@site/docs/usage/react.md",sourceDirName:"usage",slug:"/usage/react",permalink:"/bitcoin-connect-docs/usage/react",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Pure JS",permalink:"/bitcoin-connect-docs/usage/pure_js"},next:{title:"Other Frameworks",permalink:"/bitcoin-connect-docs/usage/other_frameworks"}},s={},l=[{value:"NextJS / SSR",id:"nextjs--ssr",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"react",children:"React"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:'import {Button, PayButton, init, launchModal, launchPaymentModal, closeModal, requestProvider, Connect, SendPayment} from \'@getalby/bitcoin-connect-react\';\n\n// Initialize Bitcoin Connect\ninit({\n  appName: "My Lightning App", // your app name\n})\n\n// render the Bitcoin Connect button\n<Button onConnect={(provider) => {\n  const {preimage} = await provider.sendPayment("lnbc...");\n}}/>\n\n// render a "Pay Now" button\n// invoice can be unset initially - using the onClick function is a good time to fetch the invoice\n// set the `payment` prop to override the payment status if a payment was made externally\n<PayButton invoice={invoice} onClick={() => {\n  invoice = fetchInvoice();\n  setInvoice(invoice)\n}} onPaid={(response) => alert("Paid! " + response.preimage)} payment={{preimage: \'my-preimage\'}}/>\n\n// render the connect flow on its own without the modal\n<Connect/>\n\n// render the send payment flow on its own without the modal (for E-Commerce flows)\n// set the `payment` prop to override the payment status if a payment was made externally\n<Payment invoice="lnbc..." onPaid={(response) => alert("Paid! " + response.preimage)} payment={{preimage: \'my-preimage\'}}/>\n\n// request a provider\n<button onClick={() => {\n  // if no WebLN provider exists, it will launch the modal\n  const weblnProvider = await requestProvider();\n  const { preimage } = await weblnProvider.sendPayment("lnbc...")\n}}>\n  Request WebLN provider\n</button>\n\n// open modal programmatically to connect a wallet\n<button onClick={() => launchModal()}>\n  Programmatically launch modal\n</button>\n\n// open modal programmatically to pay an invoice (for one-off payments)\n<button onClick={() => launchPaymentModal({invoice: "lnbc...", onPaid: ({preimage}) => alert("Paid: " + preimage)})}>\n  Programmatically launch payment modal\n</button>\n\n// close modal programmatically\ncloseModal();\n'})}),"\n",(0,o.jsx)(e.h3,{id:"nextjs--ssr",children:"NextJS / SSR"}),"\n",(0,o.jsxs)(e.p,{children:["Make sure to only import and render the components ",(0,o.jsx)(e.strong,{children:"client side"}),". This can be done either by creating a wrapper component with using next/dynamic with ",(0,o.jsx)(e.code,{children:"ssr: false"})," (and add the 'use client' directive when using the NextJS app router), or a dynamic import e.g."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"\"use client\"\nimport dynamic from 'next/dynamic';\nconst Button = dynamic(\n  () => import('@getalby/bitcoin-connect-react').then((mod) => mod.Button),\n  {\n    ssr: false,\n  }\n);\n\n// Render the Button normally\n\n<Button />\n\n// or to use the API:\n\n<button\n  onClick={async () => {\n    const launchModal = await import('@getalby/bitcoin-connect-react').then(\n      (mod) => mod.launchModal\n    );\n    launchModal();\n  }}\n>\n  Launch modal\n</button>\n\n// to set the global webln object:\n\nuseEffect(() => {\n  // init bitcoin connect to provide webln\n  const {onConnected} = await import('@getalby/bitcoin-connect-react').then(\n    (mod) => mod.onConnected\n  );\n  const unsub = onConnected((provider) => {\n    window.webln = provider;\n  });\n\n  return () => {\n    unsub();\n  };\n}, []);\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["See ",(0,o.jsx)(e.a,{href:"https://github.com/getAlby/bitcoin-connect/tree/master/demos/nextjs",children:"NextJS"})," and ",(0,o.jsx)(e.a,{href:"https://github.com/getAlby/bitcoin-connect/tree/master/demos/nextjs-legacy",children:"NextJS legacy"})," demos for full examples."]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>c});var o=t(6540);const a={},i=o.createContext(a);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);