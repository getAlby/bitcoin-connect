"use strict";(self.webpackChunkbitcoin_connect_docs=self.webpackChunkbitcoin_connect_docs||[]).push([[629],{5902:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>s});var i=o(4848),c=o(8453);const t={sidebar_position:6},l="\ud83d\udd17 Bitcoin Connect API",r={id:"bitcoin-connect-api",title:"\ud83d\udd17 Bitcoin Connect API",description:"Initializing Bitcoin Connect",source:"@site/docs/bitcoin-connect-api.md",sourceDirName:".",slug:"/bitcoin-connect-api",permalink:"/bitcoin-connect-docs/bitcoin-connect-api",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Other Frameworks",permalink:"/bitcoin-connect-docs/usage/other_frameworks"},next:{title:"\ud83c\udfac Demos",permalink:"/bitcoin-connect-docs/demos"}},a={},s=[{value:"Initializing Bitcoin Connect",id:"initializing-bitcoin-connect",level:2},{value:"Requesting a provider",id:"requesting-a-provider",level:2},{value:"Programmatically launching the modal",id:"programmatically-launching-the-modal",level:2},{value:"Programmatically launching the modal to receive a payment",id:"programmatically-launching-the-modal-to-receive-a-payment",level:2},{value:"Programmatically closing the modal",id:"programmatically-closing-the-modal",level:2},{value:"Disconnect from wallet",id:"disconnect-from-wallet",level:2},{value:"Get connector config",id:"get-connector-config",level:2},{value:"Events",id:"events",level:2},{value:"onConnected",id:"onconnected",level:3},{value:"onConnecting",id:"onconnecting",level:3},{value:"onDisconnected",id:"ondisconnected",level:3},{value:"onModalOpened",id:"onmodalopened",level:3},{value:"onModalClosed",id:"onmodalclosed",level:3},{value:"WebLN global object",id:"webln-global-object",level:2},{value:"WebLN events",id:"webln-events",level:3},{value:"Styling",id:"styling",level:2},{value:"Dark mode",id:"dark-mode",level:2},{value:"Automatic (Recommended)",id:"automatic-recommended",level:3},{value:"Manual",id:"manual",level:3},{value:"Access to underlying providers (NWC, LNC etc.)",id:"access-to-underlying-providers-nwc-lnc-etc",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"-bitcoin-connect-api",children:"\ud83d\udd17 Bitcoin Connect API"}),"\n",(0,i.jsx)(n.h2,{id:"initializing-bitcoin-connect",children:"Initializing Bitcoin Connect"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {init} from '@getalby/bitcoin-connect-react';\n\n// Initialize Bitcoin Connect\ninit({\n  appName: 'My Lightning App', // your app name\n  // filters: [\"nwc\"],\n  // showBalance: true,\n  // providerConfig: {\n  //   nwc: {\n  //     authorizationUrlOptions: {\n  //       requestMethods: ['get_balance', 'make_invoice', 'lookup_invoice'],\n  //     },\n  //   },\n  // }\n});\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"appName"})," - Name of the app requesting access to wallet. Currently used for NWC connections (Alby and Mutiny)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filters"}),' - Filter the type of connectors you want to show. Example: "nwc" (only show NWC connectors).']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showBalance"})," - If false, do not request the connected wallet's balance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"providerConfig"})," - ",(0,i.jsx)(n.strong,{children:"Experimental"}),": add provider-specific configuration (for NWC, LNC, LNbits etc). Currently only ",(0,i.jsx)(n.code,{children:"nwc.authorizationUrlOptions"})," is supported. ",(0,i.jsx)(n.code,{children:"NWCAuthorizationUrlOptions"})," can be found in the ",(0,i.jsx)(n.a,{href:"https://github.com/getAlby/js-sdk",children:"Alby JS SDK"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"requesting-a-provider",children:"Requesting a provider"}),"\n",(0,i.jsx)(n.p,{children:"With one line of code you can ensure you have a WebLN provider available and ready to use. If one is not available, the Bitcoin connect modal will be launched. This should be called on a user interaction to avoid the modal unexpectedly being shown to the user."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {requestProvider} from '@getalby/bitcoin-connect';\n\nconst provider = await requestProvider();\nawait provider.sendPayment('lnbc...');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"programmatically-launching-the-modal",children:"Programmatically launching the modal"}),"\n",(0,i.jsx)(n.p,{children:"The modal can then be launched with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {launchModal} from '@getalby/bitcoin-connect';\n\nlaunchModal(); // A `<bc-modal/>` element will be injected into the DOM\n"})}),"\n",(0,i.jsx)(n.h2,{id:"programmatically-launching-the-modal-to-receive-a-payment",children:"Programmatically launching the modal to receive a payment"}),"\n",(0,i.jsx)(n.p,{children:"To receive a payment the modal can be programmatically opened with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {launchPaymentModal} from '@getalby/bitcoin-connect';\n\nconst {setPaid} = launchPaymentModal({\n  invoice: 'lnbc...',\n  onPaid: (response) => {\n    clearInterval(checkPaymentInterval);\n    alert('Received payment! ' + response.preimage);\n  },\n  onCancelled: () => {\n    clearInterval(checkPaymentInterval);\n    alert('Payment cancelled');\n  },\n});\n\n// below is an example of LNURL-verify from https://github.com/getAlby/js-lightning-tools\n// you can write your own polling function to check if your invoice has been paid\n// and then call the `setPaid` function.\nconst checkPaymentInterval = setInterval(async () => {\n  const paid = await invoice.verifyPayment();\n\n  if (paid && invoice.preimage) {\n    setPaid({\n      preimage: invoice.preimage,\n    });\n  }\n}, 1000);\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Note: for P2P payments made externally there is no way for Bitcoin Connect to know when the payment has happened. ",(0,i.jsx)(n.code,{children:"launchPaymentModal"})," is more for simplifying e-commerce usecases where you are able to check the invoice yourself."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"programmatically-closing-the-modal",children:"Programmatically closing the modal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {closeModal} from '@getalby/bitcoin-connect';\n\ncloseModal();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"disconnect-from-wallet",children:"Disconnect from wallet"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {disconnect} from '@getalby/bitcoin-connect';\n\ndisconnect();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-connector-config",children:"Get connector config"}),"\n",(0,i.jsx)(n.p,{children:"Returns the saved configuration of the currently-connected connector (if connected)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {getConnectorConfig} from '@getalby/bitcoin-connect';\n\nconst connectorConfig = getConnectorConfig();\nif (connectorConfig) {\n  // can now access e.g. connectorConfig.connectorName\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.h3,{id:"onconnected",children:"onConnected"}),"\n",(0,i.jsx)(n.p,{children:"This event fires when a WebLN provider is made available."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When a user connects for the first time"}),"\n",(0,i.jsx)(n.li,{children:"On page reload when a user has previously connected"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {onConnected} from '@getalby/bitcoin-connect';\n\nconst unsub = onConnected(async (provider) => {\n  const {preimage} = await provider.sendPayment('lnbc...');\n});\nunsub();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onconnecting",children:"onConnecting"}),"\n",(0,i.jsx)(n.p,{children:"This event fires when a WebLN provider is initializing."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When a user connects for the first time"}),"\n",(0,i.jsx)(n.li,{children:"On page reload when a user has previously connected"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {onConnecting} from '@getalby/bitcoin-connect';\n\nconst unsub = onConnecting(async () => {\n  // do something...\n});\nunsub();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ondisconnected",children:"onDisconnected"}),"\n",(0,i.jsx)(n.p,{children:"This event fires when the user manually disconnects from Bitcoin Connect."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {onDisconnected} from '@getalby/bitcoin-connect';\n\nconst unsub = onDisconnected(async () => {\n  // do something...\n});\nunsub();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onmodalopened",children:"onModalOpened"}),"\n",(0,i.jsx)(n.p,{children:"This event fires when the Bitcoin Connect modal opens."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {onModalOpened} from '@getalby/bitcoin-connect';\n\nconst unsub = onModalOpened(async () => {\n  // do something...\n});\nunsub();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onmodalclosed",children:"onModalClosed"}),"\n",(0,i.jsx)(n.p,{children:"This event fires when the Bitcoin Connect modal closes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {onModalClosed} from '@getalby/bitcoin-connect';\n\nconst unsub = onModalClosed(async () => {\n  // do something...\n});\nunsub();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"webln-global-object",children:"WebLN global object"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"WARNING: webln is no longer injected into the window object by default. If you need this, execute the following code:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {onConnected} from '@getalby/bitcoin-connect';\n\nonConnected((provider) => {\n  window.webln = provider;\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"More methods coming soon. Is something missing that you'd need? let us know!"})}),"\n",(0,i.jsx)(n.h3,{id:"webln-events",children:"WebLN events"}),"\n",(0,i.jsxs)(n.p,{children:["Providers also should fire a ",(0,i.jsx)(n.code,{children:"webln:connected"})," event. See ",(0,i.jsx)(n.code,{children:"webln.guide"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"styling",children:"Styling"}),"\n",(0,i.jsx)(n.p,{children:"These variables must be set at the root or on a container element wrapping any bitcoin connect components."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"html {\n  --bc-color-brand: #196ce7; /* Only 6-digit hex and rgb formats are supported! */\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Optional CSS variables for further customization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"html {\n  --bc-color-brand-dark: #3994ff; /* use a different brand color in dark mode */\n  --bc-brand-mix: 100%; /* how much to mix the brand color with default foreground color */\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udca1 using near-white or black brand colors? either set a lower ",(0,i.jsx)(n.code,{children:"bc-brand-mix"})," or make sure to use an off-white for ",(0,i.jsx)(n.code,{children:"bc-color-brand"})," and off-black for ",(0,i.jsx)(n.code,{children:"bc-color-brand-dark"})," to avoid conflicts with the modal background color."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dark-mode",children:"Dark mode"}),"\n",(0,i.jsx)(n.h3,{id:"automatic-recommended",children:"Automatic (Recommended)"}),"\n",(0,i.jsxs)(n.p,{children:["Bitcoin Connect uses ",(0,i.jsx)(n.code,{children:"prefers-color-scheme"})," to automatically detect light/dark mode."]}),"\n",(0,i.jsx)(n.h3,{id:"manual",children:"Manual"}),"\n",(0,i.jsx)(n.p,{children:"In case your site uses a manual theme switcher, you can force a theme by following these steps:"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["see an example ",(0,i.jsx)(n.a,{href:"https://github.com/getAlby/bitcoin-connect/blob/master/dev/vite/index.html",children:"here"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["set ",(0,i.jsx)(n.code,{children:'globalThis.bcDarkMode = "class"'})," ",(0,i.jsx)(n.strong,{children:"before"})," any bitcoin connect components are rendered"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"dark"'})," must be added as a classname to the document to enable dark mode (e.g. ",(0,i.jsx)(n.code,{children:'<html class="dark">'})," or ",(0,i.jsx)(n.code,{children:"document.documentElement.classList.add('dark')"}),") otherwise light mode will be forced."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"access-to-underlying-providers-nwc-lnc-etc",children:"Access to underlying providers (NWC, LNC etc.)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { WebLNProviders, requestProvider } from \"@getalby/bitcoin-connect\";\n\nconst provider = await requestProvider();\n\nif (provider instanceof WebLNProviders.NostrWebLNProvider) {\n  provider.nostrWalletConnectUrl;\n}\n\nif (provider instanceof WebLNProviders.LNCWebLNProvider) {\n  provider.lnc.lnd.lightning.listInvoices(...);\n}\n\nif (provider instanceof WebLNProviders.LnbitsWebLNProvider) {\n  provider.requestLnbits('GET', '/api/v1/wallet');\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var i=o(6540);const c={},t=i.createContext(c);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);